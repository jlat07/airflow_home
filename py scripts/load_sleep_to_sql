from datetime import timedelta, datetime
from sqlalchemy import create_engine
from pandas.io.json import json_normalize
import pandas as pd
import json
import os


env = os.environ.get(mySQLpw)

def update_db():

    '''
    Activity Data
    '''
    
    df = pd.read_json('/Users/jthompson/dev/airflow_home/data/sleep_data.json')

    df = json_normalize(data6_1['activity'])

    df = data6_1.drop(columns=['rmssd_5min'])

    df = data6_1.drop(columns=['hr_5min'])

    df['bedtime_start'] = pd.to_datetime(df['bedtime_start'])

    df['bedtime_end'] = pd.to_datetime(df['bedtime_end'])

    df['summary_date'] = pd.to_datetime(df['summary_date'])  

    engine = create_engine('mysql+pymysql://root:{}@localhost:3306/Oura_Data'.format(env))
    df.to_sql('oura_sleep',
                    engine,
                    if_exists='replace',
                    schema='Oura_Data',
                    index=False,
                    chunksize=500,
                    dtype={'awake':int64,
                        'bedtime_end':int64DateTime,
                        'bedtime_end_delta':int64,
                        'bedtime_start':int64DateTime,
                        'bedtime_start_delta':int64,
                        'breath_average':float64,
                        'deep':int64,
                        'duration':int64,
                        'efficiency':int64,
                        'hr_average':float64,
                        'hr_lowest':int64,
                        'hypnogram_5min':varchar(255),
                        'is_longest':int64,
                        'light':int64,
                        'midpoint_at_delta':int64,
                        'midpoint_time':int64,
                        'onset_latency':int64,
                        'period_id':int64,
                        'rem':int64,
                        'restless':int64,
                        'rmssd':int64,
                        'score':int64,
                        'score_alignment':int64,
                        'score_deep':int64,
                        'score_disturbances':int64,
                        'score_efficiency':int64,
                        'score_latency':int64,
                        'score_rem':int64,
                        'score_total':int64,
                        'summary_date':int64DateTime,
                        'temperature_delta':float64,
                        'temperature_deviation':float64,
                        'temperature_trend_deviation':float64,
                        'timezone':int64,
                        'total':int64DateTime}
                        )


if __name__ == "__main__":   
    update_db()